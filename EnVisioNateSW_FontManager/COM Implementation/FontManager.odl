/*
Copyright 2025 EnVisioNate LLC

Permission is hereby granted, free of charge, to any person obtaining a 
copy of this software and associated documentation files (the “Software”), 
to deal in the Software without restriction, including without limitation 
the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the 
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included 
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR 
A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT 
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

This is the MIT License
*/

import "oaidl.idl";
import "ocidl.idl";

[ 
   uuid(1FC20340-4355-4347-8A32-A82E2FB89890),
   helpstring("EnVisioNateSW Font Manager "), 
   lcid(0x0), 
   version(1.0)
] 

library FontManager { 

    typedef enum FontType {
        type0 = 0,
        type1 = 1,
        type2 = 2,
        type3 = 3,
        type9 = 9,
        type10 = 10,
        type11 = 11,
        type14 = 14,
        type32 = 32,
        type42 = 42,
        typeUnspecified = 99
    } FontType;

    [uuid(1FC20340-4355-4347-8A32-A82E2FB89891),
      helpstring("EnVisioNateSW Font Interface: MIDL DOCUMENTATION DOES NOT DESCRIBEHOW TO OVERRIDE A SYSTEM INTERFACE"),
      nonextensible,pointer_default(unique)] 
    interface IFont_EVNSW : IUnknown {

        [propget] HRESULT Matrix([out,retval]/*XFORM*/ LPVOID pResult);
        [propput] HRESULT Matrix(/*XFORM*/ UINT_PTR pXForm);

        [propget]
        HRESULT PointSize([out,retval] FLOAT *pPointSize);
        [propput]
        HRESULT PointSize([in] FLOAT pointSize);

        HRESULT FontBoundingBox(POINTF *pLowerLeft,POINTF *pUpperRight);

        HRESULT Scale(FLOAT scaleX,FLOAT scaleY);
        HRESULT Translate(FLOAT translateX,FLOAT translateY);

        HRESULT ConcatMatrix(/*XFORM*/ UINT_PTR pXForm);

        HRESULT FontName(long cbName,char *szName);
        [propget] HRESULT FontCookie([out,retval] UINT_PTR *pCookie);
        [propget] HRESULT FontType([out,retval] enum FontType *pFontType);
        [propput] HRESULT FontType([in] enum FontType fontType);
        [propget] HRESULT GlyphIndex(unsigned short charCode,[out,retval] unsigned short *pGlyphId);

        HRESULT SetEncoding(UINT_PTR encoding);
        HRESULT SetCharStrings(UINT_PTR charStrings);

        [helpstring("Please remember to CoTaskMemFree the UINT_PTR values")]
        HRESULT GetCharacteristics(long cbName,char *pszName,long cbStyle,char *pszStyle,
                                    long cbScript,char *pszScript,long *pFontWeight,FLOAT *pSize,
                                    UINT_PTR *pAvailableFonts,UINT_PTR *pAvailableNames,UINT_PTR *pAvailableStyles,UINT_PTR *pAvailableScripts);

        HRESULT RenderGlyph(unsigned short bGlyph,/*XFORM*/ UINT_PTR pPSXform,/*XFORM*/ UINT_PTR pXformToDeviceSpace,
                                POINTF *pStartPoint,POINTF *pNextPoint);

        HRESULT SaveState();
        HRESULT RestoreState();
    };

    [uuid(1FC20340-4355-4347-8A32-A82E2FB89892),
      helpstring("EnVisioNateSW Font Manager Interface"),
      nonextensible,pointer_default(unique)] 

    interface IFontManager : IUnknown {

        HRESULT SeekFont(char *pszFamilyName,long dupCount,IFont_EVNSW **ppIFont);
        HRESULT LoadFont(char *pszFamilyName,UINT_PTR cookie,[out,retval] IFont_EVNSW **ppIFont);
        HRESULT DuplicateFont(IFont_EVNSW *pIFont,UINT_PTR cookie,IFont_EVNSW **ppIFont);

        HRESULT ChooseFont(HDC hdc,IFont_EVNSW **ppIFont);

        HRESULT RenderGlyph(unsigned short bGlyph,/*XFORM*/ UINT_PTR pPSXform,/*XFORM*/ UINT_PTR pXformToDeviceSpace,
                                POINTF *pStartPoint,POINTF *pNextPoint);

        HRESULT ScaleFont(FLOAT scaleFactor);

        [propput]
        HRESULT PointSize([in] FLOAT pointSize);

        [propget] HRESULT CurrentFont([out,retval] IFont_EVNSW **ppIFont_Current);
        [propput] HRESULT CurrentFont(IFont_EVNSW *ppIFont_Current);

        HRESULT Reset();

    };

    [uuid(1FC20340-4355-4347-8A32-A82E2FB89893),
      helpstring("EnVisioNateSW Font Manager Notifications Interface"),
      nonextensible,pointer_default(unique)] 
    
    interface IFontManagerNotifications : IUnknown {
        [helpstring("Please DO NOT free the UINT_PTR, it is statically allocated")]
        HRESULT ErrorNotification(UINT_PTR errorMessage);
    };

    [uuid(1FC20340-4355-4347-8A32-A82E2FB89899),
    helpstring("")]
        coclass FontManager {
        [default] interface IFontManager;
        [source] interface IFontManagerNotifications;
    };

};