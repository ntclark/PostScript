/*
Copyright 2025 EnVisioNate LLC

Permission is hereby granted, free of charge, to any person obtaining a 
copy of this software and associated documentation files (the “Software”), 
to deal in the Software without restriction, including without limitation 
the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the 
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included 
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR 
A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT 
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

This is the MIT License
*/import "oaidl.idl";

import "ocidl.idl";

#include <olectl.h>

[ 
   uuid(CC9F95CD-24F1-450A-8883-02B5314B1C80),
   helpstring("EnVisioNateSW Renderer"), 
   lcid(0x0), 
   version(1.0)
] 

library Renderer { 

    [uuid(CC9F95CD-24F1-450A-8883-02B5314B1C81),
      helpstring("EnVisioNateSW Renderer Interface"),
      nonextensible,pointer_default(unique)] 

    interface IRenderer : IUnknown {

        [propput] HRESULT TransformMatrix(UINT_PTR /*XFORM*/ pXformToDeviceSpace);
        [propput] HRESULT DownScale(FLOAT downScale);
        [propput] HRESULT Origin(POINTF origin);

        [helpstring("To do live rendering, i.e., draw primitives as they are defined, you must provide the DC and drawing Rect.\nRenderLive is useful for debugging")]
        HRESULT SetRenderLive(HDC hdc,RECT *pDrawingRect);
        HRESULT UnSetRenderLive();
        HRESULT Render(HDC hdc,RECT *pDrawingRect);

        HRESULT Discard();
        HRESULT ClearRect(HDC hdc,RECT *pRect,COLORREF theColor);

        HRESULT WhereAmI(long xPixels,long yPixels,FLOAT *pX,FLOAT *pY);

        HRESULT Reset();

        HRESULT GetParametersBundle(UINT_PTR **pptrBundleStorage);
        HRESULT SetParametersBundle(UINT_PTR *ptrBundleStorage);

    };

    [uuid(CC9F95CD-24F1-450A-8883-02B5314B1C82),
      helpstring("EnVisioNateSW Graphics Primitives Interface"),
      nonextensible,pointer_default(unique)] 

    interface IGraphicElements : IUnknown {

        HRESULT NewPath();
        HRESULT ClosePath();
        HRESULT StrokePath();
        HRESULT FillPath();
        
        HRESULT MoveTo(FLOAT x,FLOAT y);
        HRESULT MoveToRelative(FLOAT x,FLOAT y);

        HRESULT LineTo(FLOAT x,FLOAT y);
        HRESULT LineToRelative(FLOAT x,FLOAT y);

        HRESULT Arc(FLOAT xCenter,FLOAT yCenter,FLOAT radius,FLOAT startAngle,FLOAT endAngle);
        HRESULT Ellipse(FLOAT xCenter,FLOAT yCenter,FLOAT xRadius,FLOAT yRadius);
        HRESULT Circle(FLOAT xCenter,FLOAT yCenter,FLOAT radius);
        HRESULT CubicBezier(FLOAT x0,FLOAT y0,FLOAT x1,FLOAT y1,FLOAT x2,FLOAT y2,FLOAT x3,FLOAT y3);

        [helpstring("Call move to before your first QuadraticBezier in a chain to set the startpoint")]
        HRESULT QuadraticBezier(FLOAT x1,FLOAT y1,FLOAT x2,FLOAT y2);

        HRESULT Image(HDC hdc,HBITMAP hBitmap,UINT_PTR /*xForm*/ pPSCurrentCTM,FLOAT width,FLOAT height);

        [helpstring("Pass 0.0 for width or height to display in native bitmap width.")]
        HRESULT NonPostScriptImage(HDC hdc,HBITMAP hBitmap,FLOAT x0,FLOAT y0,FLOAT displayWidth,FLOAT displayHeight);

    };

    [uuid(CC9F95CD-24F1-450A-8883-02B5314B1C83),
        helpstring("EnVisioNateSW Graphics Parameters Interface"),
      nonextensible,pointer_default(unique)] 

    interface IGraphicParameters : IUnknown {

        HRESULT SaveState();
        HRESULT RestoreState();

        [propput] HRESULT LineWidth(FLOAT lw);
        [propput] HRESULT LineJoin(long lj);
        [propput] HRESULT LineCap(long lc);
        [propput] HRESULT LineDash(FLOAT *pValues,long countValues,FLOAT offset);

        [propput] HRESULT RGBColor(COLORREF rgb);

    };

    [uuid(CC9F95CD-24F1-450A-8883-02B5314B1C84),
      helpstring("EnVisioNateSW Renderer Notifications Interface"),
      nonextensible,pointer_default(unique)] 

    interface IRendererNotifications : IUnknown {
        [helpstring("Please DO NOT free the UINT_PTR, it is statically allocated")]
        HRESULT ErrorNotification(UINT_PTR errorMessage);
        HRESULT StatusNotification(UINT_PTR statusMessage);
        HRESULT LogNotification(UINT_PTR logMessage);
        HRESULT Clear();
    };

    [uuid(CC9F95CD-24F1-450A-8883-02B5314B1C90),
    helpstring("")]
        coclass Renderer{
        [default] interface IUnknown;
        [source] interface IRendererNotifications;
    };

};